#! /usr/bin/env python
#
#   scs - shoutcast search; search among station on shoutcast.com
#   Use as application to e.g. start random stream on command line.
#
#   Copyright (c) 2009 by Henrik Hallberg (halhen@k2h.se)
#   Interwebz: http://code.k2h.se
#   Please report bugs or feature requests by e-mail.
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import urllib
import urllib2
import re
import random
from htmlentitydefs import name2codepoint

def _build_search_url(params):
    '''
    Return URL to search web service with appropriately encoded parameters.
      params - See urllib.urlencode
    '''
    baseurl = 'http://yp.shoutcast.com/sbin/newxml.phtml?'
    params_str = urllib.urlencode(params)
    return baseurl + params_str

def _decode_entities(s):
    '''
    Return string with converted htmlentities, e.g. &auml;
      s - string to convert
    '''
    return re.sub('&(%s);'% ('|'.join(name2codepoint)), lambda(m): chr(name2codepoint[m.group(1)]), s)

def _retrieve_search_results(params):
    '''
    Perform search against shoutcast.com web service.
      params - See urllib.urlencode and http://forums.winamp.com/showthread.php?threadid=295638
    '''
    content = urllib2.urlopen(_build_search_url(params)).read()

    lp = re.compile('<station ')
    p = re.compile(' (.*?)=\"(.*?)\"')
    res = [p.findall(c) for c in content.split('\n') if lp.match(c)]

    def _info_to_dict(row):
        d = {}
        for el in row:
            d[el[0]] = el[1]
        d['name'] = _decode_entities(d['name'])
        d['genre'] = _decode_entities(d['genre'])
        d['ct'] = _decode_entities(d['ct'])
        d['lc'] = int(d['lc'])
        d['br'] = int(d['br'])
        d['id'] = int(d['id'])
        return d
    
    return [_info_to_dict(r) for r in res]        

def url_by_id(index):
    '''
    Returns the stations URL based on its ID
    '''
    return 'http://yp.shoutcast.com/sbin/tunein-station.pls?id=%s' % index

def search(search = [], station = [], genre = [], song = [], bitrate_fn = lambda(x): True, listeners_fn = lambda(x): True, mime_type = '', limit = 0, randomize = False):
    '''
    Search shoutcast.com for streams with given criteria. See http://forums.winamp.com/showthread.php?threadid=295638 for details and rules. Raises urllib2.URLError if network communication fails.
      search - List of free-form keywords. Searches in station names, genres and songs.
      station - List of phrases to find in station names.
      genre - List of phrases to find in genres.
      song - List of phrases to find in "currently playing" string - e.g artist or song name.
      bitrate_fn - function with bitrate as argument. Should return True if station is a keeper.
      listeners_fn function with number of listeners as argument. Should return True if station is a keeper.
      mime_type - filter stations by MIME type
      limit - maximum number of stations returned. 0 means unlimited.
      randomize - should results be returned in random order? True / False

    Returns a list with one dict per station. Each dict contains:
      'name' - station name
      'mt' - mime type
      'id' - station id (used in URL)
      'br' - bitrate in kbps
      'genre' - station genre(s)
      'ct' - currently played track
      'lc' - listener count
    '''

    opt_dict = {}

    keywords = search + station + genre + song

    if mime_type:
        opt_dict['mt'] = mime_type

    if not keywords: # No content to search, use default
        opt_dict['genre'] = 'Top500'

        # Perform search with empty keywords
        results = _retrieve_search_results(opt_dict)
    else:
        # Find everything applicable and filter ourselves, since the API is limited
        # Not very elegant, and quite slow with big queries. No problem with normal use, though.
        results = []
        known_ids = [] # "cache" found station ids to make code easier below
        for k in keywords:
            opt_dict.update({'search': k})
            results += [row for row in _retrieve_search_results(opt_dict) if row['id'] not in known_ids]
            known_ids = [row['id'] for row in results]

    # Filter for bitrate
    results = [r for r in results if bitrate_fn(r['br'])]

    # Filter by listeners
    results = [r for r in results if listeners_fn(r['lc'])]

    # Now filter all the stations we've got. AND all criteria. Not super fast, but OK for normal use
    for s in station:
        results = [r for r in results if s.upper() in r['name'].upper()]

    for g in genre:
        results = [r for r in results if g.upper() in r['genre'].upper()]

    for s in song:
        results = [r for r in results if s.upper() in r['ct'].upper()]

    for k in keywords:
        results = [r for r in results if k.upper() in ('%s %s %s' % (r['name'], r['genre'], r['ct'])).upper()]

    if randomize:
        random.shuffle(results)
    else:
        # Sort by listener count
        results.sort(lambda a, b: cmp(int(a['lc']), int(b['lc'])), reverse=True)

    if limit > 0:
        results = results[:limit]

    return results

if __name__ == '__main__':
    # Stuff that is not needed when used as a library are declared in here

    description = 'Search shoutcast.com for radio stations (not for commercial use, see http://forums.winamp.com/showthread.php?threadid=295638). Use criteria to search for station names, genres or current songs, and filters to specify details. Keywords are used to search freely among station names, genres and current songs. With no criteria or keywords, %prog returns the current Top500 list. Stations are storted by number of listeners, unless the --random flag is enabled. Example: \'%prog -n 10 -g Rock -p "Depeche Mode" -b "=128"\' shows the top ten Rock 128kbps stations currently playing Depeche Mode.'
    import optparse
    
    def _station_text(station_info, verbose = False):
        url = url_by_id(station_info['id'])

        if verbose:
            resstr = '%s [%skbps %s]\n' % (station_info['name'],
                                           station_info['br'],
                                           station_info['mt'])
            resstr += '\t%s\n' % (url)
            resstr += '\t%s, %s listeners\n' % (station_info['genre'],
                                                station_info['lc'])
            resstr += '\tNow playing: %s\n' % (station_info['ct'])
        else:
            resstr = url
            
        return resstr

    def _fail_exit(code, msg):
        import sys
        sys.stderr.write("%s: %s\n" % (sys.argv[0], msg))
        sys.exit(code)

    def _expression_param(value):
        if not value:
            return lambda(x):True
        if not re.compile('^[=><]?\d+$').match(value):
            o.error('invalid expression: %s' % value)
            
        if value[0] in ('><'):
            return lambda(x): eval('%s%s' % (x, value))
        else:
            return lambda(x): eval('%s==%s' % (x, value.strip('=')))

    def _int_param(value):
        try:
            return int(value)
        except:
            o.error('invalid integer: %s' % value)
        
    o = optparse.OptionParser(usage = "%prog [options] [keywords] - shoutcast search",
                              version="%prog CURVERSION",
                              description = description)
    o.add_option('-n', '--limit', dest='limit', action='store',
                 default=0, help='maximum number of stations.')
    o.add_option('-r', '--random', dest='random', action='store_true',
                 default=False, help='sort stations randomly.')
    o.add_option('-v', '--verbose', dest='verbose', action='store_true',
                 default=False, help='verbose output, useful for getting search right.')
    p = optparse.OptionGroup(o, 'Criteria')
    p.add_option('-g', '--genre', dest='genre', action='append',
                 default=[], help='genre, e.g. \'-g Ambient\'.')
    p.add_option('-p', '--playing', dest='song', action='append',
                 default=[], help='currently played song / artist, e.g. \'-p Shantel\'.')
    p.add_option('-s', '--station', dest='station', action='append',
                 default=[], help='station name, e.g. \'-s "Groove Salad"\'.')
    o.add_option_group(p)                         
    f = optparse.OptionGroup(o, 'Filters', 'Filter the search results. These can NOT be used alone, e.g. to search for all stations with no listeners. If no criteria or keywords are given, the Top500 stations are used.')
    f.add_option('-b', '--bitrate', dest='bitrate', action='store',
                 default='', help='bitrate (kbps), [=><]NNN, e.g. \'-b "=128"\' for 128kbps.')
    f.add_option('-l', '--listeners', dest='listeners', action='store',
                 default='', help='number of listeners, [=><]NNN, e.g. \'-l ">500"\' for more than 500 listeners.')
    f.add_option('-t', '--type', dest='codec', action='store',
                 default='', help='"mpeg" for MP3, "aacp" for aacPlus.')
    o.add_option_group(f)
    
    (options, args) = o.parse_args()

    p_keywords = args
    p_verbose = options.verbose
    p_random = options.random
    p_genre = options.genre
    p_station = options.station
    p_song = options.song
    p_limit = _int_param(options.limit)
    p_bitrate = _expression_param(options.bitrate)
    p_listeners = _expression_param(options.listeners)

    p_mime_type = ''
    if options.codec:
        if options.codec.strip('"') not in ('mpeg', 'aacp'):
            o.error('CODEC must be "mpeg", "aacp" or none')
        p_mime_type = 'audio/' + options.codec.strip('"')

    if p_verbose:
        # Print information about query to help debug
        print 'Search summary'
        print '-' * 30
        print ' Keywords: %s' % ', '.join(p_keywords)
        print '   Genres: %s' % ', '.join(p_genre)
        print '  Playing: %s' % ', '.join(p_song)
        print ' Stations: %s' % ', '.join(p_station)
        bitrate_str = ''
        if options.bitrate:
            bitrate_str = options.bitrate
        print '  Bitrate: %s' % bitrate_str
        listeners_str = ''
        if options.listeners:
            listeners_str = options.listeners
        print 'Listeners: %s' % listeners_str
        print '     Type: %s' % options.codec
        limit_str = ''
        if p_limit > 0:
            limit_str = str(p_limit)
        print '    Limit: %s' % limit_str
        order_str = 'by no listeners'
        if p_random:
            order_str = 'random'
        print '    Order: %s' % order_str
        print ''

    try:
        results = search(p_keywords, p_station, p_genre, p_song, p_bitrate, p_listeners, p_mime_type, p_limit, p_random)
        print '\n'.join(_station_text(el, p_verbose) for el in results)
        if p_verbose:
            print '%s station(s) found.' % len(results)
    except urllib2.URLError, e:
        _fail_exit(1, 'network error: %s' % e)
    except Exception, e:
        _fail_exit(3, 'unknown error: %s' % e)
